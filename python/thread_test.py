import threading
from queue import Queue
import time
import subprocess

print_lock = threading.Lock()
q = Queue()


# example task
def exampleJob(worker):
    time.sleep(0.5)  # pretend to work, sleep for 0.5 seconds
    with print_lock:
        #print(threading.current_thread() .name, worker)
        out = threading.current_thread() .name, worker
        print(subprocess.run(["echo", str(out)]))


# pulls a worker from the queue and processes it
def threader():
    while True:
        # get worker from queue
        worker = q.get()

        # pass worker to exampleJob
        exampleJob(worker)

        # task complete
        q.task_done()


# maximum number of threads / workers
for x in range(10):
    t = threading.Thread(target=threader)
    t.daemon = True
    print('[+] Spawing thread %d' % x)
    t.start()

start = time.time()

# assigns an amount of jobs
for worker in range(20):
    print('[+] Assigned job %d' % worker)
    q.put(worker)

q.join()

print('Entire job took: ', time.time() - start)
