<#
    Name: Riley Scott
    Date: 2017-11-02
    Version: 1.5
    Description: PowerShell Portscanner
#>

#define variables
$device = $args[0]
$type = $args[1]
$port = $args[2]
$start = $args[3]
$stop = $args[4]

#ping device to see if it is on the network
function pingdevice
{
    $status = (New-Object System.Net.NetworkInformation.Ping).Send($device.ToString()).Status
    if($status -eq "Success")
    {
        Write-Output "[*] $device is up"
    }
    else
    {
        Write-Output "[!] $device did not respond`n[!] Error status is $status`n[!] Quitting"
        exit
    }
}

#check to see if tcp ports are open
function tcpcheck
{
    #scan for multiple ports
    if($port -match "multi")
    {
        Write-Output "[*] Testing ports $start through $stop"
        for($counter=$start; $counter -le $stop; $counter++)
        {
            try
            {
                (New-Object Net.Sockets.TcpClient).Connect($device,$counter)
                Write-Output "   +TCP $counter is open"
            }
            catch
            {
                Write-Output "   -TCP $counter is closed"
            }
        }
    }
    #scan for single port
    else
    {
        Write-Output "[*] Testing port $port on $device"
        try
        {
            (New-Object Net.Sockets.TcpClient).Connect($device,$counter)
            Write-Output "    +TCP $port is open"
        }
        catch
        {
            Write-Output "   -TCP $port is closed"
        }
    }
}

#check to see if udp ports are open
function udpcheck
{
    #scan for multiple ports
    if($port -match "multi")
    {
        Write-Output "[*] Testing ports $start through $stop"
        for($counter=$start; $counter -le $stop; $counter++)
        {
            try
            {
                (New-Object Net.Sockets.UdppClient).Connect($device,$counter)
                Write-Output "    +UDP $counter is open"
            }
            catch
            {
                Write-Output "    -UDP $counter is closed"
            }
        }
    }
    #scan for single port
    else
    {
        Write-Output "[*] Testing port $port on $device"
        try
        {
            (New-Object Net.Sockets.UdppClient).Connect($device,$counter)
            Write-Output " +  UDP $port is open"
        }
        catch
        {
            Write-Output " -  UDP $port is closed"
        }
    }
}

#running functions
Write-Output "[*] Pinging host $device"
pingdevice

if($type -match "both")
{
    Write-Output "[*] Scanning TCP ports..."
    tcpcheck
    Write-Output "[*] Scanning UDP ports..."
    udpcheck
}
elseif($type -match "tcp")
{
    Write-Output "[*] Scanning TCP ports..."
    tcpcheck
}
elseif($type -match "udp")
{
    Write-Output "[*] Scanning UDP ports..."
    udpcheck
}
else
{
    Write-Output "[!] Invalid use!`n[*] Syntax is 'portscanner { tcp | udp | both } [multi] startport [endport]'"
}