<#
    Name: Riley Scott
    Date: 2017-11-02
    Version: 1.4
    Description: PowerShell Portscanner
#>

#define variables
$device = $args[0]
$type = $args[1]
$port = $args[2]
$start = $args[3]
$stop = $args[4]

#ping device to see if it is on the network
function pingdevice
{
    if(test-connection $device -ErrorAction SilentlyContinue)
    {
        write-output "$device is up"
    }
    else
    {
        write-output "$device is down"
    }
}

#check to see if tcp ports are open
function tcpcheck
{
    #scan for multiple ports
    if($port -match "multi")
    {
        for($counter=$start; $counter -le $stop; $counter++)
        {
            Write-Output "testing port $counter on $device"
            $porttest = New-Object Net.Sockets.TcpClient
            try
            {
                $connect = $porttest.connect($device,$counter)
                Write-Output "TCP $counter is open"
            }
            catch
            {
                Write-Output "TCP $counter is closed"
            }
        }
    }
    #scan for single port
    else
    {
        Write-Output "testing port $port on $device"
        $porttest = New-Object Net.Sockets.TcpClient
        try
        {
            $connect = $porttest.connect($device,$port)
            Write-Output "TCP $port is open"
        }
        catch
        {
            Write-Output "TCP $port is closed"
        }
    }
}

#check to see if udp ports are open
function udpcheck
{
    #scan for multiple ports
    if($port -match "multi")
    {
        for($counter=$start; $counter -le $stop; $counter++)
        {
            Write-Output "testing port $counter on $device"
            $porttest = New-Object Net.Sockets.UdpClient
            try
            {
                $connect = $porttest.connect($device,$counter)
                Write-Output "UDP $counter is open"
            }
            catch
            {
                Write-Output "UDP $counter is closed"
            }
        }
    }
    #scan for single port
    else
    {
        Write-Output "testing port $port on $device"
        $porttest = New-Object Net.Sockets.UdpClient
        try
        {
            $connect = $porttest.connect($device,$port)
            Write-Output "UDP $port is open"
        }
        catch
        {
            Write-Output "UDP $port is closed"
        }
    }
}

#running functions
pingdevice

if($type -match "both")
{
    Write-Output "scanning TCP ports"
    tcpcheck
    Write-Output "scanning UDP ports"
    udpcheck
}
elseif($type -match "tcp")
{
    tcpcheck
}
elseif($type -match "udp")
{
    udpcheck
}
else
{
    Write-Output "Invalid Use. Syntax is 'portscanner [-multi] { tcp | udp | both } startport# [endport#]'"
}