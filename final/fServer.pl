#!/usr/bin/perl

#Name: Riley Scott
#Date: 2017-11-22
#Version: 1.0
#Description: Log receiving server; receives log tarballs using IO::Socket

use IO::Socket;
my $port = $ARGV[0] || 6123;
my $base_dir = './files';

########################
# START OF SERVER LOOP #
########################
# If base directory does not exist, create it
if (! -d $base_dir) {
  mkdir($base_dir,0755);
  print "[*] Save directory created: $base_dir\n";
}

# Create a socket and listen for connections, or die
my $server = IO::Socket::INET->new(
    Listen => 5,
    LocalAddr => 'localhost',
    LocalPort => $port ,
    Proto     => 'tcp'
) or die "[!] Can't create server socket: $!";
print "[*] Server opened: localhost:$port\n[*] Waiting clients...\n\n";

# Read from socket connection
while( my $client = $server->accept ) {
  print "\n[*] New connection!\n";
  my ($buffer,%data,$data_content);
  my $buffer_size = 1;

  # Separate the header into seperate variables
  while( sysread($client, $buffer, $buffer_size) ) {
    if    ($data{hostname} !~ /!:!$/) { $data{hostname} .= $buffer ; }
    elsif ($data{filename} !~ /#:#$/) { $data{filename} .= $buffer ; }
    elsif ($data{filesum} !~ /&:&$/) { $data{filesum} .= $buffer ; }
    elsif ($data{filesize} !~ /_$/) { $data{filesize} .= $buffer ; }
    elsif ( length($data_content) < $data{filesize}) {
      if ($data{filesave} eq '') {
        my $save_dir = "$base_dir/$data{hostname}";
        $save_dir =~ s/!:!$//;

        # If host does not have a save directory, create one
        if (! -d $save_dir) {
          mkdir($save_dir,0755);
          print "[*] New client, directory created: $save_dir\n";
        }

        # Save received file into host directory
        $data{filesave} = "$save_dir/$data{filename}";
        $data{filesave} =~ s/#:#$//;
        $buffer_size = 1024*10;
        if (-e $data{filesave}) { unlink ($data{filesave}) ;}
        print "[*] Saving: $data{filesave} ($data{filesize}bytes)";
      }

      open (FILENEW,">>$data{filesave}") ; binmode(FILENEW);
      print FILENEW $buffer;
      close (FILENEW);
      print ".";
    }
    else { last ;}
  }

  print "OK\n\n";

  # Get sums of file and header
  $isosum = hash_check($data{filesave});
  $ursum = $data{filesum};
  $ursum =~ s/&:&$//;

  print "[*] Original SHA1 Sum: $ursum\n";
  print "[*] Saved SHA1 Sum:    $isosum\n";

  if ($ursum eq $isosum) { print "[*] Matching SHA1 sums, file verified\n\n"; }
  else { print "[!] SHA1 check failed, could not verify file\n\n"; }
}

# Performs an SHA1 sum check on the file and outputs received and calculated variables
sub hash_check {
  my $file = shift;

  $sha1 = `sha1sum $file`;
  @foo = split(/ +/, $sha1);
  $sum = @foo[0];

  return "$sum";
}
